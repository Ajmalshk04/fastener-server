=======================================================================
C:\My-Projects\Fastners-new\server\models\adminModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const AdminSchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: "User", required: true },
  department: { type: String },
  accessLevel: { type: Number, default: 1 },
});

const Admin = mongoose.model("Admin", AdminSchema);
module.exports = Admin;


=======================================================================
C:\My-Projects\Fastners-new\server\models\customerModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const CustomerSchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: "User", required: true },
  shippingAddresses: [
    {
      addressLine1: String,
      addressLine2: String,
      city: String,
      state: String,
      country: String,
      zipCode: String,
    },
  ],
  billingAddress: {
    addressLine1: String,
    addressLine2: String,
    city: String,
    state: String,
    country: String,
    zipCode: String,
  },
  preferredPaymentMethod: { type: String },
});

const Customer = mongoose.model("Customer", CustomerSchema);
module.exports = Customer;


=======================================================================
C:\My-Projects\Fastners-new\server\models\projectModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const ProjectSchema = new Schema(
  {
    customer: { type: Schema.Types.ObjectId, ref: "Customer", required: true },
    supplier: { type: Schema.Types.ObjectId, ref: "Supplier" },
    admin: { type: Schema.Types.ObjectId, ref: "Admin" },
    title: { type: String, required: true },
    description: { type: String },
    requirements: {
      material: String,
      process: String,
      quantity: Number,
      tolerance: String,
      finish: String,
    },
    files: [
      {
        name: String,
        firebaseStorageUrl: String,
        downloadUrl: String,
        fileType: {
          type: String,
          enum: [
            "3DMXL",
            "3MF",
            "DXF",
            "SAT",
            "SLDPRT",
            "STL",
            "STP",
            "STEP",
            "GIF",
            "JPEG",
            "JPG",
            "PNG",
            "PDF",
            "DWG",
            "IGES",
            "POF",
          ],
        },
        category: {
          type: String,
          enum: ["3D_MODEL", "DRAWING", "SPECIFICATION", "IMAGE", "OTHER"],
        },
        size: Number, // File size in bytes
        uploadedAt: Date,
      },
    ],
    status: {
      type: String,
      enum: [
        "DRAFT",
        "SUBMITTED",
        "QUOTED",
        "IN_PRODUCTION",
        "SHIPPED",
        "DELIVERED",
        "CANCELLED",
      ],
      default: "DRAFT",
    },
    deliveryDate: Date,
  },
  { timestamps: true }
);

const Project = mongoose.model("Project", ProjectSchema);
module.exports = Project;


=======================================================================
C:\My-Projects\Fastners-new\server\models\projectUpdateModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const ProjectUpdateSchema = new Schema(
  {
    project: { type: Schema.Types.ObjectId, ref: "Project", required: true },
    supplier: { type: Schema.Types.ObjectId, ref: "Supplier", required: true },
    description: { type: String, required: true },
    status: {
      type: String,
      enum: ["PENDING", "IN_PROGRESS", "COMPLETED"],
      default: "PENDING",
    },
    attachments: [
      {
        name: String,
        firebaseStorageUrl: String,
        downloadUrl: String,
        fileType: {
          type: String,
          enum: [
            "3DMXL",
            "3MF",
            "DXF",
            "SAT",
            "SLDPRT",
            "STL",
            "STP",
            "STEP",
            "GIF",
            "JPEG",
            "JPG",
            "PNG",
            "PDF",
            "DWG",
            "IGES",
            "POF",
          ],
        },
        category: {
          type: String,
          enum: ["3D_MODEL", "DRAWING", "SPECIFICATION", "IMAGE", "OTHER"],
        },
        size: Number, // File size in bytes
        uploadedAt: Date,
      },
    ],
    createdAt: { type: Date, default: Date.now },
  },
  { timestamps: true }
);

module.exports = mongoose.model("ProjectUpdate", ProjectUpdateSchema);


=======================================================================
C:\My-Projects\Fastners-new\server\models\quotationModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const QuotationSchema = new Schema(
  {
    project: {
      type: Schema.Types.ObjectId,
      ref: "Project",
      required: true,
    },
    supplier: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    unitPrice: {
      type: Number,
      required: true,
    },
    quantity: {
      type: Number,
      required: true,
    },
    subtotal: {
      type: Number,
      required: true,
    },
    taxes: {
      type: Number,
      default: 0,
    },
    shippingCost: {
      type: Number,
      default: 0,
    },
    totalPrice: {
      type: Number,
      required: true,
    },
    currency: {
      type: String,
      default: "USD",
    },
    leadTime: {
      type: Number,
      required: true,
    },
    validUntil: {
      type: Date,
      required: true,
    },
    status: {
      type: String,
      enum: ["PENDING", "ACCEPTED", "REJECTED"],
      default: "PENDING",
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Quotation", QuotationSchema);


=======================================================================
C:\My-Projects\Fastners-new\server\models\supplierModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const SupplierSchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: "User", required: true },
  companyName: { type: String, required: true },
  companyAddress: { type: String },
  taxId: { type: String },
  manufacturingCapabilities: [String],
  certifications: [String],
  rating: { type: Number, default: 0 },
  totalProjects: { type: Number, default: 0 },
  activeProjects: { type: Number, default: 0 },
  leadTime: { type: Number }, // Average lead time in days
  minimumOrderValue: { type: Number },
});

const Supplier = mongoose.model("Supplier", SupplierSchema);
module.exports = Supplier;


=======================================================================
C:\My-Projects\Fastners-new\server\models\userModel.js

const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const config = require("../config/config");

const UserSchema = new mongoose.Schema(
  {
    email: {
      type: String,
      required: [true, "Please provide an email"],
      unique: true,
      match: [
        /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
        "Please provide a valid email",
      ],
    },
    password: {
      type: String,
      required: [true, "Please add a password"],
      minlength: 6,
      select: false,
    },
    role: {
      type: String,
      enum: ["customer", "admin", "supplier"],
      default: "customer",
    },
    firstName: {
      type: String,
      required: [true, "Please add a first name"],
    },
    lastName: {
      type: String,
      required: [true, "Please add a last name"],
    },
    phoneNumber: String,
    company: String,
    isVerified: {
      type: Boolean,
      default: false,
    },
    otp: {
      code: String,
      expiresAt: Date,
    },
  },
  { timestamps: true }
);

UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

UserSchema.methods.getSignedJwtToken = function () {
  return jwt.sign({ id: this._id, role: this.role }, config.JWT_SECRET, {
    expiresIn: config.JWT_EXPIRE,
  });
};

module.exports = mongoose.model("User", UserSchema);


